import pygame
from Powerup import Powerup
class Maze(Powerup):
    def __init__(self):
        self.wall_color = (0, 0, 255)  
        self.dot_color = (255, 255, 255)  
        self.blank_color = (0, 0, 0)  
        self.wall_size = 20
        self.dot_size = 5
        self.level=1
        self.power_ups = []
        self.layout = self.load_layout()


    def load_layout(self):
        return [
            "111111111111111111111111111111111111111",
            "100000000000000000000000000000000000001",
            "100000000000000000000000000000000000001",
            "10s000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "1000000000000000111111110000001000s0001",
            "100000000000000000010000000000100000001",
            "100000000000000000010000000000100000001",
            "111111110000000000010000000000100000001",
            "100l000100000000000100000000001000l0001",
            "100000000000000000010000000000100s00001",
            "1000000000000000l0000000000000100000001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "1000000000000000s0000000000000100000001",
            "100000000000000000000000000000100000001",
            "100001110000000000000000000000100000001",
            "100000110000000000000000000000100000001",
            "100000110000000000000000000000100000001",
            "100000110000000000000000000000100000001",
            "100l001100000000000000000010001000l0001",
            "100000000000000000000000000001100000001",
            "100000000000000000000000000000100000001",            
            "111111111111111111111111111111111111111", 
        ]


    def load_layout_2(self):
         return [
            "111111111111111111111111111111111111111",
            "100000000000000000000000000000000000001",
            "100000000000000000000000000000000000001",
            "10s000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "100000010000000000000000000000100000001",
            "100000010000000000000000000000100000001",
            "100000010000000000000000000000100000001",
            "000000010000000000000000000000100000001",
            "0000000100000000111111110000001000s0001",
            "000000010000000000010000000000100000001",
            "000000010000000000010000000000111111001",
            "111111110000000000010000000000100000001",
            "100l000100000000000100000000001000l0001",
            "100000000000000000010000000000100s00001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "1000000000000000s0000000000000100000001",
            "100000000000000000000000000000100000001",
            "111111110000000000000000000000100000001",
            "100000110000000000000000000000100000001",
            "100000111111111110000000000000100000001",
            "100000110000000000000000000000100000001",
            "100l001100000000000000000010001000l0001",
            "100000000000000000000000000001100000001",
            "100000000000000000000000000000100000001",            
            "111111111111111111111111111111111111111", 
        ]
    def load_layout_3(self):
         return [
            "111111111111111111111111111111111111111",
            "100000000000000000000000000000000000001",
            "100000000000000000000000000000000000001",
            "10s000000000000000100000000000100000001",
            "100000000000000000100000000000100000001",
            "100000010000000000100000000000100000001",
            "100000010000000000100000000000100000001",
            "100000010000000000100000000000100000001",
            "000000010000000000100000000000100000001",
            "0000000100000000111111110000001000s0001",
            "000000010000000000010000000000100000001",
            "000000010000000000010000000000111111001",
            "111111110000000000010000000000100000001",
            "100l000100000000000100000000001000l0001",
            "100000000000000000010000000000100s00001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "100000000000000000000000000000100000001",
            "1001111000000000s0000000000000100000001",
            "1000l0100000000000000000000000100000001",
            "111000110000000000000010000000100000001",
            "100000110000000000000010000000100000001",
            "100000111111111110000010000000100000001",
            "100000110000000000000010000000100000001",
            "100l001100000000000000100010001000l0001",
            "100000000000000000000010000001100000001",
            "100000000000000000000010000000100000001",            
            "111111111111111111111111111111111111111", 
        ]
    
    def reset(self):
        if self.level==1:
            self.layout = self.load_layout()
        elif self.level==2:
            self.layout = self.load_layout_2()
        elif self.level==3:
            self.layout = self.load_layout_3()    

    def next_level(self):
        self.level+=1
        if self.level==2:
            self.layout = self.load_layout_2()
        elif self.level==3:
            self.layout = self.load_layout_3()


    def eaten_dot(self, position):
        x, y = position
        if self.layout[y][x] != "1":  
            self.layout[y] = self.layout[y][:x] + "2" + self.layout[y][x+1:]  
            return True
    
    def draw(self, screen):
        self.power_ups = []
        for y, row in enumerate(self.layout):
            for x, cell in enumerate(row):
                pos_x, pos_y = x * self.wall_size, y * self.wall_size
                if cell == "1":
                    pygame.draw.rect(screen, self.wall_color, (pos_x, pos_y, self.wall_size, self.wall_size))
                elif cell == "0":
                    pygame.draw.circle(screen, self.dot_color, (pos_x + self.wall_size // 2, pos_y + self.wall_size // 2), self.dot_size)
                elif cell == "2":
                    pygame.draw.circle(screen, self.blank_color, (pos_x + self.wall_size // 2, pos_y + self.wall_size // 2), self.dot_size)
                elif cell == "l":
                    life_powerup = Powerup('life', (pos_x, pos_y))
                    screen.blit(life_powerup.image, (pos_x, pos_y))
                elif cell == "s":
                    speed_powerup = Powerup('speed', (pos_x, pos_y))
                    screen.blit(speed_powerup.image, (pos_x, pos_y))
                # elif cell == 'l':
                #     self.power_ups.append(Powerup('life', (x * self.wall_size, y * self.wall_size)))
                # elif cell == 's':
                #     self.power_ups.append(Powerup('speed', (x * self.wall_size, y * self.wall_size)))